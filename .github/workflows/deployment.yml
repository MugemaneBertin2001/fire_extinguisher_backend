name: Deploy FireTrack360 to DigitalOcean

on:
  push:
    branches: ['main']
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/firetrack360-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/firetrack360-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NODE_ENV=production
          platforms: linux/amd64

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create environment file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /root/firetrack360
            cat > /root/firetrack360/.env << "EOL"
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            NODE_ENV=${{ secrets.NODE_ENV }}
            SALT_ROUNDS=${{ secrets.SALT_ROUNDS }}
            EMAIL_API_URL=${{ secrets.EMAIL_API_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_TTL=${{ secrets.REDIS_TTL }}
            THROTTLE_TTL=${{ secrets.THROTTLE_TTL }}
            THROTTLE_LIMIT=${{ secrets.THROTTLE_LIMIT }}
            EOL
            chmod 600 /root/firetrack360/.env

      - name: Copy Docker Compose file
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          source: 'docker-compose.production.yml'
          target: '/root/firetrack360'
          strip_components: 0

      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            cd /root/firetrack360
            doctl auth init -t ${{ secrets.DO_SSH_PRIVATE_KEY}}
            if ! command -v docker compose &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            CURRENT_CONTAINERS=$(docker compose -f docker-compose.production.yml ps -q)
            if [ ! -z "$CURRENT_CONTAINERS" ]; then
              docker compose -f docker-compose.production.yml stop
              docker compose -f docker-compose.production.yml rm -f
            fi
            if docker images | grep -q "${DOCKERHUB_USERNAME}/firetrack360-backend"; then
              docker rmi ${DOCKERHUB_USERNAME}/firetrack360-backend:latest
            fi
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml up -d

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            cd /root/firetrack360
            set -a
            source .env
            set +a
            max_retries=10
            retry_count=0
            wait_time=15
            while [ $retry_count -lt $max_retries ]; do
              health_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health || echo "000")
              if [ "$health_status" = "200" ]; then
                break
              fi
              sleep $wait_time
              retry_count=$((retry_count + 1))
            done
            if [ $retry_count -eq $max_retries ]; then
              docker compose -f docker-compose.production.yml logs
              exit 1
            fi
            retry_count=0
            while [ $retry_count -lt $max_retries ]; do
              if docker compose -f docker-compose.production.yml exec -T mysql mysqladmin ping -h localhost -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent; then
                break
              fi
              sleep $wait_time
              retry_count=$((retry_count + 1))
            done
            if [ $retry_count -eq $max_retries ]; then
              docker compose -f docker-compose.production.yml logs
              exit 1
            fi

      - name: Notify success
        if: success()
        run: echo "Deployment succeeded!"

      - name: Notify failure
        if: failure()
        run: echo "Deployment failed!"

      - name: Cleanup
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            docker system prune -f
            docker volume prune -f --filter "label!=keep"